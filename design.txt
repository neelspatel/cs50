      Perhaps the best way to comprehensively discuss the design of turftalk will be to go page by page and describe the uses and creation behind each element on each page. We will begin, though, on a more general level. The background image is consistent across the site. We choose it for a few reasons. One, the cartoonish characteristic gives a welcoming and playful feel to our social centered cite. Moreover, the color scheme, with a primarily green focus, and the nature theme is consistent with our “turf” concept. In general, we have tried to make webpages as clutter-free as possible—putting only the necessary information on display. We built the general layout using Twitter Bootstrap. The box-like layout, among other stylistic touches, are all courtesy of Bootstrap, but we have made several modifications to both the front end and back end operations that will be explained in detail. 
      Let us start our design tour by visiting our sign up page at http://www.turftalk.us. We had three important facets that needed to be displayed on this first page: sign in form, sign up form, and some short information about the site. Users are used to seeing the sign in material in the navigation bar, usually in the top right corner, so that is exactly where we put it. The information on the left hand side was purposefully kept brief, but the users have easy access to the “Learn More” page if more details are needed. We tried to make our sign up form as basic as possible so that potential users can get into turftalk as quickly as possible. As a result, we only ask for very basic information from the user. Thankfully, turftalk does not require much information from the user for he or she to experience the interaction to the fullest. In terms of functionality, when the “sign up” button is clicked, our turftalk backend validates each entry (checking for blank fields and that the password and the confirmation match). Then, the new user is added to our database and the user is redirected to the homepage. 
	We designed the homepage to be as clutter free as possible. The four distinct actions that the user can make are clearly separated and labeled. Let’s begin with the “Join” box. In order to display the turfs near you, we pull from the table of all turfs, screen this selection for the turfs that are within the geological range of the user and the display a button that links to a URL of the turf. This button has most of the information about the turf: its name, location, distance from current user, and number of members. Making the entire button with all of this information the clickable way to access a turf was done because it seemed like the most intuitive method. Moreover, a clickable link with the turf’s creator’s written description is easily accessible by the current user. The “Return” box, located directly under join follows the same protocol for displaying information as “Join” with a few small exceptions. First, “Return” only displays turfs in which the user is already a member. Second, “Return” also includes a “leave” button that allows the user to no longer become a member of that turf. The “Search” box, located in the bottom right corner of the arrangement, allows users to quickly search our site by name, location, or description of a turf. It uses the Solr search engine through the sunspot gem for full text search of our turf table. Search results are displayed below the search input box. The last box, “Create” allows users to create their own turf. The information that the user adds in the text fields is added to a new entry in our turf database with these parameters. The turf’s location (written in latitude and longitude) is given by the user’s latitude and longitude, which is determined by HTML5 geocoding. If we do not have access to the user’s position then we use the googlemaps API to geocode the user’s given description of his/her location to latitude and longitude. If that fails, the user is redirected back to the homepage and an alert is displayed that we cannot determine location of the turf. If the create is successful, it takes you to the turf’s page.
	A turf’s page follows the same basic structure as the rest of the site: clearly defined boxes with clearly defined uses. The top rectangle on the screen gives that basic information about the turf that is imported from the turf table. We found this to be a clear and intuitive way to alert the user of what turf they are currently in. We designed the “Posts” box to be 2/3 of the width while the “Chat” to be 1/3 of the width in order to give more importance to the “Posts” section. We did this because we feel that the sharing of links, and meaningful discussion topics and questions will provide the fruitful interaction upon which turftalk was created. “Chat,” on the other hand, was designed to be used for quick interactions without much group discussion value.  On the same lines of giving posts more importance, we put the text box to create a post on the top left of the box rather than under the recent posts (as was done in “Chat”). We did this to create a feed of posts that would be the center of attention on the page. Moreover, we organized this feed with the most recent items to give more weight to the current activity. In general, the posts feed design was implemented with the twitter feed in mind. In terms of backend functionality, when the user clicks “submit” A POST request is sent to the server, which triggers the create method in the POST controller. This saves the post to the database and calls a JavaScript file called create.js.erb within the POST view that asynchronously updates the post box with the new post, resets the form, and updates the post counter. We have also incorporated upvoting and downvoting of posts. When an arrow is clicked, “create” is called within the votes controller, which adds a vote to the vote table that is associated with the post and the user. If the user has already voted, we modify their vote. If they haven’t we create a new vote. Lastly, the vote counter is updated. 
Comments work similarly to posts. When the user clicks submit, a POST request is submitted to the server, which creates a comment in the table associated with the user and the post. Then, the server initiates the create.js.erb file in the comments controller, which asynchronously adds the comment and updates the comment counter and clears the comment form. These comments are formatted in a clickable dropdown menu to decrease the clutter on the screen. The final element of the “Post” box is the map that shows the users location. We implemented this because we thought it was a cool way to show any user where the turf is located. In terms of backend implementation, we embedded a static map with the latitude and longitude of the current turf that was created be calling the Google static map API. The “Chat” box works in a very similar manner to “Post.” When “submit” is click in “Chat,” a POST request is sent to the server, which creates a chat associated with the user and the turf. Then it calls the create.js.erb file and asynchronously updates the chat box and clears the chat form. To make the entire posting and chatting experience more aesthetically pleasing and easy to understand, we have included the time of each post and chat, and the name and profile picture of the user who submitted it next to each item. The information that we display can be found at our next destination: the profile page. 
	Our user profile page consists of two boxes: one with general information and one that displays the current turfs in which the user is a member. The general information is retrieved from the user database and displayed in an easy to read manner. The “current” box functions almost identically to the “Return” box on the homepage, but does not allow the user to leave a turf. Every user’s profile page is accessible by any other user simply by clicking on the user’s name next to their posts and/or comments. 
	The final page design to explore is the “Learn More” section. To make this page more user friendly, we have incorporated an accordion interface that allows users to see all of the questions that we thought would provide useful information. In order to view the answers, the user just needs to click on the question and the answer will pop out. We hope that our “Learn More” page will provide all of the details any user will need, but we have also included a feedback form in the footer of every page that allows anyone to give us questions, comments, concerns, and suggestions. In short, we are really excited about how turftalk can revolutionize localized interactions and hope that our design interface will facilitate the ease and enjoyment of everyone involved. 

